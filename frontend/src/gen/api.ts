/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Portfolio Todo API
 * „ÇØ„É™„Éº„É≥„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Å´Âü∫„Å•„ÅÑ„ÅüTodoÁÆ°ÁêÜREST API

Hono + PostgreSQL + Prisma + TypeScript„ÅßÊßãÁØâ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ

 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateTodoRequest,
  DeleteTodo200,
  HealthCheck200,
  InternalServerErrorResponse,
  InvalidIdErrorResponse,
  NotFoundErrorResponse,
  Todo,
  UpdateTodoDoneRequest,
  UpdateTodoRequest,
  ValidationErrorResponse,
} from "./models";

import { apiClient } from "../lib/apiClient";
/**
 * API„Çµ„Éº„Éê„Éº„ÅåÊ≠£Â∏∏„Å´Âãï‰Ωú„Åó„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç„Åó„Åæ„Åô
 * @summary „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
 */
export const healthCheck = (signal?: AbortSignal) => {
  return apiClient<HealthCheck200>({ url: `/`, method: "GET", signal });
};

export const getHealthCheckQueryKey = () => {
  return [`/`] as const;
};

export const getHealthCheckQueryOptions = <
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getHealthCheckQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheck>>> = ({
    signal,
  }) => healthCheck(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof healthCheck>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HealthCheckQueryResult = NonNullable<
  Awaited<ReturnType<typeof healthCheck>>
>;
export type HealthCheckQueryError = unknown;

export function useHealthCheck<
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheck>>,
          TError,
          Awaited<ReturnType<typeof healthCheck>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHealthCheck<
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheck>>,
          TError,
          Awaited<ReturnType<typeof healthCheck>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHealthCheck<
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
 */

export function useHealthCheck<
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHealthCheckQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * „Åô„Åπ„Å¶„ÅÆTodo„Çí‰ΩúÊàêÊó•ÊôÇ„ÅÆÈôçÈ†Ü„ÅßÂèñÂæó„Åó„Åæ„Åô
 * @summary Todo‰∏ÄË¶ß„ÇíÂèñÂæó
 */
export const getTodos = (signal?: AbortSignal) => {
  return apiClient<Todo[]>({ url: `/todos`, method: "GET", signal });
};

export const getGetTodosQueryKey = () => {
  return [`/todos`] as const;
};

export const getGetTodosQueryOptions = <
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = InternalServerErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTodosQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodos>>> = ({
    signal,
  }) => getTodos(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTodos>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTodosQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTodos>>
>;
export type GetTodosQueryError = InternalServerErrorResponse;

export function useGetTodos<
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = InternalServerErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodos>>,
          TError,
          Awaited<ReturnType<typeof getTodos>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTodos<
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = InternalServerErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodos>>,
          TError,
          Awaited<ReturnType<typeof getTodos>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTodos<
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = InternalServerErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Todo‰∏ÄË¶ß„ÇíÂèñÂæó
 */

export function useGetTodos<
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = InternalServerErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTodosQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Êñ∞„Åó„ÅÑTodo„Çí‰ΩúÊàê„Åó„Åæ„Åô
 * @summary Todo„Çí‰ΩúÊàê
 */
export const createTodo = (
  createTodoRequest: CreateTodoRequest,
  signal?: AbortSignal,
) => {
  return apiClient<Todo>({
    url: `/todos`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createTodoRequest,
    signal,
  });
};

export const getCreateTodoMutationOptions = <
  TError = ValidationErrorResponse | InternalServerErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTodo>>,
    TError,
    { data: CreateTodoRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTodo>>,
  TError,
  { data: CreateTodoRequest },
  TContext
> => {
  const mutationKey = ["createTodo"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTodo>>,
    { data: CreateTodoRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createTodo(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTodoMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTodo>>
>;
export type CreateTodoMutationBody = CreateTodoRequest;
export type CreateTodoMutationError =
  | ValidationErrorResponse
  | InternalServerErrorResponse;

/**
 * @summary Todo„Çí‰ΩúÊàê
 */
export const useCreateTodo = <
  TError = ValidationErrorResponse | InternalServerErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createTodo>>,
      TError,
      { data: CreateTodoRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createTodo>>,
  TError,
  { data: CreateTodoRequest },
  TContext
> => {
  const mutationOptions = getCreateTodoMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * ÊåáÂÆö„Åï„Çå„ÅüID„ÅÆTodoË©≥Á¥∞„ÇíÂèñÂæó„Åó„Åæ„Åô
 * @summary ÁâπÂÆö„ÅÆTodo„ÇíÂèñÂæó
 */
export const getTodoById = (id: string, signal?: AbortSignal) => {
  return apiClient<Todo>({ url: `/todos/${id}`, method: "GET", signal });
};

export const getGetTodoByIdQueryKey = (id?: string) => {
  return [`/todos/${id}`] as const;
};

export const getGetTodoByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getTodoById>>,
  TError =
    | InvalidIdErrorResponse
    | NotFoundErrorResponse
    | InternalServerErrorResponse,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTodoById>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTodoByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodoById>>> = ({
    signal,
  }) => getTodoById(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTodoById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTodoByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTodoById>>
>;
export type GetTodoByIdQueryError =
  | InvalidIdErrorResponse
  | NotFoundErrorResponse
  | InternalServerErrorResponse;

export function useGetTodoById<
  TData = Awaited<ReturnType<typeof getTodoById>>,
  TError =
    | InvalidIdErrorResponse
    | NotFoundErrorResponse
    | InternalServerErrorResponse,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTodoById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodoById>>,
          TError,
          Awaited<ReturnType<typeof getTodoById>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTodoById<
  TData = Awaited<ReturnType<typeof getTodoById>>,
  TError =
    | InvalidIdErrorResponse
    | NotFoundErrorResponse
    | InternalServerErrorResponse,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTodoById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodoById>>,
          TError,
          Awaited<ReturnType<typeof getTodoById>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTodoById<
  TData = Awaited<ReturnType<typeof getTodoById>>,
  TError =
    | InvalidIdErrorResponse
    | NotFoundErrorResponse
    | InternalServerErrorResponse,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTodoById>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÁâπÂÆö„ÅÆTodo„ÇíÂèñÂæó
 */

export function useGetTodoById<
  TData = Awaited<ReturnType<typeof getTodoById>>,
  TError =
    | InvalidIdErrorResponse
    | NotFoundErrorResponse
    | InternalServerErrorResponse,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTodoById>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTodoByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÊåáÂÆö„Åï„Çå„ÅüTodo„ÅÆ„Çø„Ç§„Éà„É´„ÇÑË©≥Á¥∞„ÇíÊõ¥Êñ∞„Åó„Åæ„Åô
 * @summary Todo„ÇíÊõ¥Êñ∞
 */
export const updateTodo = (
  id: string,
  updateTodoRequest: UpdateTodoRequest,
) => {
  return apiClient<Todo>({
    url: `/todos/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: updateTodoRequest,
  });
};

export const getUpdateTodoMutationOptions = <
  TError =
    | ValidationErrorResponse
    | NotFoundErrorResponse
    | InternalServerErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTodo>>,
    TError,
    { id: string; data: UpdateTodoRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTodo>>,
  TError,
  { id: string; data: UpdateTodoRequest },
  TContext
> => {
  const mutationKey = ["updateTodo"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTodo>>,
    { id: string; data: UpdateTodoRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateTodo(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTodoMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTodo>>
>;
export type UpdateTodoMutationBody = UpdateTodoRequest;
export type UpdateTodoMutationError =
  | ValidationErrorResponse
  | NotFoundErrorResponse
  | InternalServerErrorResponse;

/**
 * @summary Todo„ÇíÊõ¥Êñ∞
 */
export const useUpdateTodo = <
  TError =
    | ValidationErrorResponse
    | NotFoundErrorResponse
    | InternalServerErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateTodo>>,
      TError,
      { id: string; data: UpdateTodoRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateTodo>>,
  TError,
  { id: string; data: UpdateTodoRequest },
  TContext
> => {
  const mutationOptions = getUpdateTodoMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * ÊåáÂÆö„Åï„Çå„ÅüTodo„ÇíÂâäÈô§„Åó„Åæ„Åô
 * @summary Todo„ÇíÂâäÈô§
 */
export const deleteTodo = (id: string) => {
  return apiClient<DeleteTodo200>({ url: `/todos/${id}`, method: "DELETE" });
};

export const getDeleteTodoMutationOptions = <
  TError = InvalidIdErrorResponse | InternalServerErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTodo>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTodo>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteTodo"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTodo>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteTodo(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTodoMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTodo>>
>;

export type DeleteTodoMutationError =
  | InvalidIdErrorResponse
  | InternalServerErrorResponse;

/**
 * @summary Todo„ÇíÂâäÈô§
 */
export const useDeleteTodo = <
  TError = InvalidIdErrorResponse | InternalServerErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteTodo>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteTodo>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteTodoMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * ÊåáÂÆö„Åï„Çå„ÅüTodo„ÅÆÂÆå‰∫ÜÁä∂ÊÖãÔºàisDoneÔºâ„ÇíÊõ¥Êñ∞„Åó„Åæ„Åô
 * @summary Todo„ÅÆÂÆå‰∫ÜÁä∂ÊÖã„ÇíÊõ¥Êñ∞
 */
export const updateTodoDone = (
  id: string,
  updateTodoDoneRequest: UpdateTodoDoneRequest,
) => {
  return apiClient<Todo>({
    url: `/todos/${id}/done`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: updateTodoDoneRequest,
  });
};

export const getUpdateTodoDoneMutationOptions = <
  TError =
    | ValidationErrorResponse
    | NotFoundErrorResponse
    | InternalServerErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTodoDone>>,
    TError,
    { id: string; data: UpdateTodoDoneRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTodoDone>>,
  TError,
  { id: string; data: UpdateTodoDoneRequest },
  TContext
> => {
  const mutationKey = ["updateTodoDone"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTodoDone>>,
    { id: string; data: UpdateTodoDoneRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateTodoDone(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTodoDoneMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTodoDone>>
>;
export type UpdateTodoDoneMutationBody = UpdateTodoDoneRequest;
export type UpdateTodoDoneMutationError =
  | ValidationErrorResponse
  | NotFoundErrorResponse
  | InternalServerErrorResponse;

/**
 * @summary Todo„ÅÆÂÆå‰∫ÜÁä∂ÊÖã„ÇíÊõ¥Êñ∞
 */
export const useUpdateTodoDone = <
  TError =
    | ValidationErrorResponse
    | NotFoundErrorResponse
    | InternalServerErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateTodoDone>>,
      TError,
      { id: string; data: UpdateTodoDoneRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateTodoDone>>,
  TError,
  { id: string; data: UpdateTodoDoneRequest },
  TContext
> => {
  const mutationOptions = getUpdateTodoDoneMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
