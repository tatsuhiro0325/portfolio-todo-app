openapi: 3.0.3
info:
  title: Portfolio Todo API
  description: |
    クリーンアーキテクチャに基づいたTodo管理REST API
    
    Hono + PostgreSQL + Prisma + TypeScriptで構築されています。
  version: 1.0.0
  contact:
    name: API Support
  license:
    name: ISC

servers:
  - url: http://localhost:3001
    description: 開発環境
  - url: http://localhost:3001/api
    description: 本番環境（予定）

tags:
  - name: todos
    description: Todo管理API
  - name: health
    description: ヘルスチェック

paths:
  /:
    get:
      tags:
        - health
      summary: ヘルスチェック
      description: APIサーバーが正常に動作しているか確認します
      operationId: healthCheck
      responses:
        '200':
          description: サーバーは正常に動作しています
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Todo API is running!

  /todos:
    get:
      tags:
        - todos
      summary: Todo一覧を取得
      description: すべてのTodoを作成日時の降順で取得します
      operationId: getTodos
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - todos
      summary: Todoを作成
      description: 新しいTodoを作成します
      operationId: createTodo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTodoRequest'
            examples:
              example1:
                summary: 買い物Todoの例
                value:
                  title: 買い物に行く
                  description: 牛乳とパンを買う
              example2:
                summary: 仕事Todoの例
                value:
                  title: レポートを書く
                  description: 期末レポートの作成
      responses:
        '201':
          description: 作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /todos/{id}:
    parameters:
      - $ref: '#/components/parameters/TodoId'
    
    get:
      tags:
        - todos
      summary: 特定のTodoを取得
      description: 指定されたIDのTodo詳細を取得します
      operationId: getTodoById
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          $ref: '#/components/responses/InvalidIdError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - todos
      summary: Todoを更新
      description: 指定されたTodoのタイトルや詳細を更新します
      operationId: updateTodo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTodoRequest'
            examples:
              updateBoth:
                summary: タイトルと詳細を両方更新
                value:
                  title: 買い物に行く（更新）
                  description: 牛乳、パン、卵を買う
              updateTitleOnly:
                summary: タイトルのみ更新
                value:
                  title: 買い物に行く（更新）
              updateDescriptionOnly:
                summary: 詳細のみ更新
                value:
                  description: 牛乳、パン、卵を買う
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - todos
      summary: Todoを削除
      description: 指定されたTodoを削除します
      operationId: deleteTodo
      responses:
        '200':
          description: 削除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Todo deleted successfully
        '400':
          $ref: '#/components/responses/InvalidIdError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /todos/{id}/done:
    parameters:
      - $ref: '#/components/parameters/TodoId'
    
    patch:
      tags:
        - todos
      summary: Todoの完了状態を更新
      description: 指定されたTodoの完了状態（isDone）を更新します
      operationId: updateTodoDone
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTodoDoneRequest'
            examples:
              markAsCompleted:
                summary: 完了としてマーク
                value:
                  isDone: true
              markAsIncomplete:
                summary: 未完了としてマーク
                value:
                  isDone: false
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  parameters:
    TodoId:
      name: id
      in: path
      description: TodoのUUID
      required: true
      schema:
        type: string
        format: uuid
        example: 550e8400-e29b-41d4-a716-446655440000

  schemas:
    Todo:
      type: object
      required:
        - id
        - title
        - description
        - isDone
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: 一意のID（自動生成）
          example: 550e8400-e29b-41d4-a716-446655440000
        title:
          type: string
          description: Todoのタイトル
          minLength: 1
          maxLength: 255
          example: 買い物に行く
        description:
          type: string
          description: Todoの詳細説明
          minLength: 1
          example: 牛乳とパンを買う
        isDone:
          type: boolean
          description: 完了状態
          default: false
          example: false
        createdAt:
          type: string
          format: date-time
          description: 作成日時
          example: '2025-10-03T10:30:00.000Z'
        updatedAt:
          type: string
          format: date-time
          description: 更新日時
          example: '2025-10-03T10:30:00.000Z'

    CreateTodoRequest:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
          description: Todoのタイトル
          minLength: 1
          maxLength: 255
          example: 買い物に行く
        description:
          type: string
          description: Todoの詳細説明
          minLength: 1
          example: 牛乳とパンを買う

    UpdateTodoRequest:
      type: object
      minProperties: 1
      properties:
        title:
          type: string
          description: Todoのタイトル
          minLength: 1
          maxLength: 255
          example: 買い物に行く（更新）
        description:
          type: string
          description: Todoの詳細説明
          minLength: 1
          example: 牛乳、パン、卵を買う

    UpdateTodoDoneRequest:
      type: object
      required:
        - isDone
      properties:
        isDone:
          type: boolean
          description: Todoの完了状態
          example: true

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: エラーメッセージ
          example: Validation error
        details:
          type: array
          description: 詳細なエラー情報（オプション）
          items:
            type: object
            properties:
              code:
                type: string
                example: too_small
              message:
                type: string
                example: Title is required
              path:
                type: array
                items:
                  type: string
                example: ['title']

  responses:
    ValidationError:
      description: バリデーションエラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            titleRequired:
              summary: タイトルが必須
              value:
                error: Validation error
                details:
                  - code: too_small
                    minimum: 1
                    type: string
                    inclusive: true
                    message: Title is required
                    path: ['title']
            invalidBoolean:
              summary: boolean型が期待される
              value:
                error: Validation error
                details:
                  - code: invalid_type
                    expected: boolean
                    received: string
                    path: ['isDone']
                    message: Expected boolean, received string

    InvalidIdError:
      description: 無効なID形式
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Invalid ID format
            details:
              - validation: uuid
                code: invalid_string
                message: Invalid UUID format
                path: ['id']

    NotFoundError:
      description: リソースが見つかりません
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Todo not found

    InternalServerError:
      description: サーバー内部エラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Internal server error
